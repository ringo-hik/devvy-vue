/**
 * AI Agent API 서비스
 * Vue 2.0 환경에서 사용하는 API 통신 서비스
 */

import axios from 'axios';

// API 기본 설정
const API_BASE_URL = process.env.VUE_APP_API_BASE_URL || 'http://localhost:8080';
const API_TIMEOUT = 30000;

// Axios 인스턴스 생성
const apiClient = axios.create({
  baseURL: API_BASE_URL + '/api/v1/devportal/ai-agent/smart-search',
  timeout: API_TIMEOUT,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

// 요청 인터셉터
apiClient.interceptors.request.use(
  function(config) {
    console.log('[API Request]', config.method.toUpperCase(), config.url);
    
    // 인증 토큰 추가 (필요시)
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = 'Bearer ' + token;
    }
    
    return config;
  },
  function(error) {
    console.error('[API Request Error]', error);
    return Promise.reject(error);
  }
);

// 응답 인터셉터
apiClient.interceptors.response.use(
  function(response) {
    console.log('[API Response]', response.status, response.config.url);
    return response;
  },
  function(error) {
    console.error('[API Response Error]', error.response || error);
    
    // 인증 오류 처리
    if (error.response && error.response.status === 401) {
      localStorage.removeItem('authToken');
      window.location.href = '/login';
    }
    
    return Promise.reject(error);
  }
);

/**
 * AI Agent 서비스 클래스
 */
var AiAgentService = {
  
  /**
   * 카테고리 목록 조회
   */
  getCategories: function() {
    return apiClient.get('/categories')
      .then(function(response) {
        return {
          success: true,
          data: response.data.data || [],
          message: response.data.message
        };
      })
      .catch(function(error) {
        return {
          success: false,
          error: error.response && error.response.data 
            ? error.response.data.errorMessage 
            : '카테고리 조회에 실패했습니다.'
        };
      });
  },

  /**
   * AI 스마트 검색 채팅
   */
  aiSmartSearch: function(requestData) {
    if (!requestData.categoryId || !requestData.message) {
      return Promise.resolve({
        success: false,
        error: '카테고리와 메시지는 필수입니다.'
      });
    }

    var payload = {
      categoryId: requestData.categoryId,
      message: requestData.message.trim(),
      sessionId: requestData.sessionId
    };

    return apiClient.post('/chat', payload)
      .then(function(response) {
        return {
          success: true,
          data: {
            sessionId: response.data.sessionId,
            message: response.data.message,
            timestamp: response.data.timestamp
          }
        };
      })
      .catch(function(error) {
        return {
          success: false,
          error: error.response && error.response.data 
            ? error.response.data.errorMessage 
            : 'AI 응답 처리에 실패했습니다.'
        };
      });
  },

  /**
   * 채팅 히스토리 조회
   */
  getHistory: function(params) {
    params = params || {};
    
    var queryParams = {
      page: params.page || 0,
      size: params.size || 20
    };
    
    if (params.categoryId) {
      queryParams.categoryId = params.categoryId;
    }

    return apiClient.get('/history', { params: queryParams })
      .then(function(response) {
        return {
          success: true,
          data: response.data.data || [],
          message: response.data.message
        };
      })
      .catch(function(error) {
        return {
          success: false,
          error: error.response && error.response.data 
            ? error.response.data.errorMessage 
            : '히스토리 조회에 실패했습니다.'
        };
      });
  },

  /**
   * 피드백 전송
   */
  sendFeedback: function(feedbackData) {
    if (!feedbackData.sessionId || !feedbackData.rating) {
      return Promise.resolve({
        success: false,
        error: '세션 ID와 평점은 필수입니다.'
      });
    }

    var payload = {
      sessionId: feedbackData.sessionId,
      rating: feedbackData.rating,
      comment: feedbackData.comment || ''
    };

    return apiClient.post('/feedback', payload)
      .then(function(response) {
        return {
          success: true,
          message: response.data.message
        };
      })
      .catch(function(error) {
        return {
          success: false,
          error: error.response && error.response.data 
            ? error.response.data.errorMessage 
            : '피드백 전송에 실패했습니다.'
        };
      });
  },

  /**
   * 헬스체크
   */
  healthCheck: function() {
    return apiClient.get('/health')
      .then(function(response) {
        return {
          success: true,
          message: response.data.message
        };
      })
      .catch(function(error) {
        return {
          success: false,
          error: '서비스 상태 확인에 실패했습니다.'
        };
      });
  }
};

export default AiAgentService;