<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.aiagent.mapper.SmartSearchMapper">

    <!-- 카테고리 목록 조회 -->
    <select id="selectCategories" resultType="com.example.aiagent.vo.SmartSearchVo">
        SELECT 
            category_id as categoryId,
            category_name as name,
            description,
            icon,
            sort_order as sortOrder,
            is_active as isActive
        FROM ai_smart_search_category
        WHERE is_active = 1
        ORDER BY sort_order ASC
    </select>

    <!-- 카테고리 상세 조회 -->
    <select id="selectCategoryById" resultType="com.example.aiagent.vo.SmartSearchVo">
        SELECT 
            category_id as categoryId,
            category_name as name,
            description,
            icon
        FROM ai_smart_search_category
        WHERE category_id = #{categoryId}
          AND is_active = 1
    </select>

    <!-- 카테고리별 컨텍스트 데이터 조회 (프로젝트 정보) -->
    <select id="selectContextDataByCategory" resultType="com.example.aiagent.vo.SmartSearchVo">
        SELECT 
            CONCAT(
                'Project Name: ', project_name, '\n',
                'Framework: ', fw_name, '\n', 
                'IMS Key: ', ims_key, '\n',
                'Test Request: ', test_request, '\n',
                'Status: ', status, '\n',
                'Created Date: ', created_date, '\n',
                '---'
            ) as content
        FROM project_info 
        WHERE category_id = #{categoryId}
          AND status = 'ACTIVE'
        ORDER BY created_date DESC
        LIMIT 100
    </select>

    <!-- 채팅 메시지 저장 -->
    <insert id="insertChatMessage">
        INSERT INTO ai_smart_search_message (
            session_id,
            user_id,
            category_id,
            message_type,
            content,
            created_date
        ) VALUES (
            #{sessionId},
            #{userId},
            #{categoryId},
            #{messageType},
            #{content},
            #{timestamp}
        )
    </insert>

    <!-- 채팅 히스토리 조회 -->
    <select id="selectChatHistory" resultType="com.example.aiagent.vo.SmartSearchVo">
        SELECT 
            s.session_id as sessionId,
            c.category_name as categoryName,
            s.last_message as lastMessage,
            s.last_message_at as lastMessageAt,
            s.message_count as messageCount
        FROM ai_smart_search_session s
        INNER JOIN ai_smart_search_category c ON s.category_id = c.category_id
        WHERE s.user_id = #{userId}
          <if test="categoryId != null">
              AND s.category_id = #{categoryId}
          </if>
        ORDER BY s.last_message_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 세션 존재 여부 확인 -->
    <select id="existsSession" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM ai_smart_search_session
        WHERE session_id = #{sessionId}
    </select>

    <!-- 채팅 세션 생성 -->
    <insert id="insertChatSession">
        INSERT INTO ai_smart_search_session (
            session_id,
            user_id,
            category_id,
            message_count,
            last_message_at,
            created_date
        ) VALUES (
            #{sessionId},
            #{userId},
            #{categoryId},
            1,
            #{lastMessageAt},
            #{createdAt}
        )
    </insert>

    <!-- 채팅 세션 업데이트 -->
    <update id="updateChatSession">
        UPDATE ai_smart_search_session 
        SET 
            last_message_at = #{lastMessageAt},
            message_count = message_count + 1,
            last_message = (
                SELECT content 
                FROM ai_smart_search_message 
                WHERE session_id = #{sessionId} 
                  AND message_type = 'USER'
                ORDER BY created_date DESC 
                LIMIT 1
            )
        WHERE session_id = #{sessionId}
    </update>

    <!-- 피드백 저장 -->
    <insert id="insertFeedback">
        INSERT INTO ai_smart_search_feedback (
            session_id,
            user_id,
            rating,
            comment,
            created_date
        ) VALUES (
            #{sessionId},
            #{userId},
            #{rating},
            #{comment},
            #{createdAt}
        )
    </insert>

</mapper>