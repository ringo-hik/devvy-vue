<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.aiagent.mapper.SmartSearchMapper">

    <!-- 카테고리 목록 조회 (활성화된 것만) -->
    <select id="selectActiveCategories" resultType="com.example.aiagent.dto.category.CategoryDto">
        SELECT 
            category_id   AS categoryId,
            category_name AS name,
            description,
            icon,
            sort_order    AS sortOrder
        FROM smart_search_data 
        WHERE data_type = 'CATEGORY' AND is_active = 1
        ORDER BY sort_order ASC
    </select>

    <!-- ID로 카테고리 상세 조회 -->
    <select id="selectCategoryById" resultType="com.example.aiagent.dto.category.CategoryDto">
        SELECT 
            category_id   AS categoryId,
            category_name AS name,
            description,
            icon
        FROM smart_search_data 
        WHERE data_type = 'CATEGORY' AND category_id = #{categoryId}
    </select>

    <!-- 카테고리별 컨텍스트 데이터 조회 -->
    <select id="selectContextDataByCategoryId" resultType="com.example.aiagent.domain.ContextData">
        SELECT content
        FROM smart_search_data 
        WHERE data_type = 'CONTEXT' 
          AND category_id = #{categoryId}
          AND is_active = 1
        ORDER BY sort_order ASC
    </select>

    <!-- 채팅 히스토리 조회 (N+1 문제 해결) -->
    <select id="selectChatHistory" resultType="com.example.aiagent.dto.history.HistorySummaryDto">
        WITH LastMessage AS (
            SELECT
                session_id,
                content,
                ROW_NUMBER() OVER(PARTITION BY session_id ORDER BY created_at DESC) as rn
            FROM chat_messages
        ),
        MessageCounts AS (
            SELECT
                session_id,
                COUNT(*) as messageCount
            FROM chat_messages
            GROUP BY session_id
        )
        SELECT
            s.session_id      AS sessionId,
            s.category_name   AS categoryName,
            lm.content        AS lastMessage,
            s.last_message_at AS lastMessageAt,
            COALESCE(mc.messageCount, 0) AS messageCount
        FROM
            chat_sessions s
        LEFT JOIN
            LastMessage lm ON s.session_id = lm.session_id AND lm.rn = 1
        LEFT JOIN
            MessageCounts mc ON s.session_id = mc.session_id
        WHERE
            s.user_id = #{userId}
            <if test="categoryId != null">
                AND s.category_id = #{categoryId}
            </if>
        ORDER BY
            s.last_message_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 세션 존재 여부 확인 -->
    <select id="existsSession" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM chat_sessions 
        WHERE session_id = #{sessionId}
    </select>

    <!-- 채팅 메시지 저장 -->
    <insert id="insertChatMessage" parameterType="com.example.aiagent.domain.ChatMessage">
        INSERT INTO chat_messages (
            session_id, user_id, category_id, message_type, content, created_at
        ) VALUES (
            #{sessionId}, #{userId}, #{categoryId}, #{messageType}, #{content}, #{createdAt}
        )
    </insert>

    <!-- 채팅 세션 생성 -->
    <insert id="insertChatSession" parameterType="com.example.aiagent.domain.ChatSession">
        INSERT INTO chat_sessions (
            session_id, user_id, category_id, category_name, last_message_at, created_at
        ) VALUES (
            #{sessionId}, #{userId}, #{categoryId}, #{categoryName}, #{lastMessageAt}, #{createdAt}
        )
    </insert>
    
    <!-- 채팅 세션 업데이트 -->
    <update id="updateChatSession" parameterType="com.example.aiagent.domain.ChatSession">
        UPDATE chat_sessions 
        SET last_message_at = #{lastMessageAt}
        WHERE session_id = #{sessionId}
    </update>

    <!-- 피드백 저장 -->
    <insert id="insertFeedback" parameterType="com.example.aiagent.dto.feedback.FeedbackRequest">
        INSERT INTO chat_feedback (
            session_id, user_id, rating, comment, message_id, created_at
        ) VALUES (
            #{sessionId}, #{userId}, #{rating}, #{comment}, #{messageId}, #{createdAt}
        )
    </insert>
</mapper>
