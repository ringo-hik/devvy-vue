/**
 * Devvy Bot API 실제 연동 서비스
 * - 실제 백엔드 API와 통신하여 데이터를 주고받습니다.
 * - API Endpoint: /api/v1/devportal/devvy
 */

import axios from 'axios';

// Axios 인스턴스 생성. baseURL을 설정하여 코드 중복을 줄입니다.
const apiClient = axios.create({
  baseURL: '/api/v1/devportal/devvy', // 백엔드 API 기본 경로
  headers: {
    'Content-Type': 'application/json',
  }
});

/**
 * API 요청 후 공통 처리 로직
 * @param {Promise} request - axios 요청 Promise
 * @returns {Promise<Object>} - { success: boolean, data: any, error: string|null }
 */
const handleRequest = async (request) => {
  try {
    const response = await request;
    // 백엔드에서 success: true와 함께 보낸 데이터가 response.data.data에 있을 경우
    if (response.data && response.data.success) {
      return { success: true, data: response.data.data, message: response.data.message };
    }
    // 성공했지만 데이터 구조가 다른 경우 (e.g. health check)
    if (response.status === 200) {
        return { success: true, data: response.data };
    }
    // 백엔드에서 success: false로 응답한 경우
    return { success: false, error: response.data.errorMessage || 'An unknown error occurred.' };
  } catch (error) {
    console.error('💥 API Request ailed:', error);
    const errorMessage = error.response?.data?.errorMessage || error.message || 'Network error or server is not responding.';
    return { success: false, error: errorMessage };
  }
};

const devvyService = {
  /**
   * 서비스 상태를 확인합니다.
   */
  healthCheck() {
    return handleRequest(apiClient.get('/health'));
  },

  /**
   * 챗봇 카테고리 목록을 조회합니다.
   */
  getCategories() {
    return handleRequest(apiClient.get('/categories'));
  },

  /**
   * AI에게 메시지를 보내고 답변을 받습니다.
   * @param {Object} requestData - { categoryId, message, sessionId }
   */
  sendMessage(requestData) {
    return handleRequest(apiClient.post('/chat', requestData));
  },

  /**
   * 사용자의 전체 대화 히스토리 목록을 조회합니다.
   */
  getChatHistory() {
    return handleRequest(apiClient.get('/history'));
  },

  /**
   * 특정 세션의 상세 메시지 목록을 조회합니다.
   * @param {string} sessionId - 조회할 세션 ID
   */
  getSessionMessages(sessionId) {
    return handleRequest(apiClient.get(`/sessions/${sessionId}/messages`));
  },

  /**
   * 사용자 피드백을 서버에 전송합니다.
   * @param {Object} feedbackData - { rating, content, category, sessionId }
   */
  sendFeedback(feedbackData) {
    return handleRequest(apiClient.post('/feedback', feedbackData));
  },
};

// 동적 로딩 메시지는 API 서비스가 아닌 UI 로직에 속하므로,
// 기존과 같이 ChatTab.vue에서 직접 관리하거나 별도의 UI 유틸리티 파일로 분리하는 것을 권장합니다.
const LOADING_MESSAGES = {
    ko: [
      "✅ Devvy가 최적의 답변을 찾고 있어요.", "🧠 AI의 뉴런이 활발하게 움직이는 중...", "데이터의 바다에서 정보를 탐색 중입니다 🌊", "잠시만요, 거의 다 됐어요! 🚀", "마법 같은 답변을 생성하고 있습니다 ✨"
    ],
    en: [
      "✅ Devvy is finding the optimal answer.", "🧠 AI neurons are firing up...", "Navigating the sea of data 🌊", "Just a moment, almost there! 🚀", "Generating a magical response ✨"
    ]
};

// 이 함수는 UI 컴포넌트에서 직접 사용할 수 있도록 export 합니다.
export function getLoadingMessage(language = 'ko') {
    const messages = LOADING_MESSAGES[language] || LOADING_MESSAGES.en;
    return messages[Math.floor(Math.random() * messages.length)];
}


export default devvyService;
